// Generated by view binder compiler. Do not edit!
package com.example.sa.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sa.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ConstraintLayout ba;

  @NonNull
  public final Button button;

  @NonNull
  public final Button button2;

  @NonNull
  public final CheckBox checkBoxDark;

  @NonNull
  public final CheckBox checkBoxEnglish;

  @NonNull
  public final CheckBox checkBoxGermany;

  @NonNull
  public final CheckBox checkBoxLight;

  private SettingsBinding(@NonNull LinearLayout rootView, @NonNull ConstraintLayout ba,
      @NonNull Button button, @NonNull Button button2, @NonNull CheckBox checkBoxDark,
      @NonNull CheckBox checkBoxEnglish, @NonNull CheckBox checkBoxGermany,
      @NonNull CheckBox checkBoxLight) {
    this.rootView = rootView;
    this.ba = ba;
    this.button = button;
    this.button2 = button2;
    this.checkBoxDark = checkBoxDark;
    this.checkBoxEnglish = checkBoxEnglish;
    this.checkBoxGermany = checkBoxGermany;
    this.checkBoxLight = checkBoxLight;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ba;
      ConstraintLayout ba = ViewBindings.findChildViewById(rootView, id);
      if (ba == null) {
        break missingId;
      }

      id = R.id.button;
      Button button = ViewBindings.findChildViewById(rootView, id);
      if (button == null) {
        break missingId;
      }

      id = R.id.button2;
      Button button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.checkBoxDark;
      CheckBox checkBoxDark = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxDark == null) {
        break missingId;
      }

      id = R.id.checkBoxEnglish;
      CheckBox checkBoxEnglish = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxEnglish == null) {
        break missingId;
      }

      id = R.id.checkBoxGermany;
      CheckBox checkBoxGermany = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxGermany == null) {
        break missingId;
      }

      id = R.id.checkBoxLight;
      CheckBox checkBoxLight = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLight == null) {
        break missingId;
      }

      return new SettingsBinding((LinearLayout) rootView, ba, button, button2, checkBoxDark,
          checkBoxEnglish, checkBoxGermany, checkBoxLight);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
